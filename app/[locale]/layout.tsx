import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import { setRequestLocale } from "next-intl/server";
import type { Metadata } from "next";
import localFont from "next/font/local";
import "../globals.css";
import { Providers } from "@/components/providers/provider";

const geistSans = localFont({
  src: "../fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "../fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

export default async function RootLayout(props: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await props.params;

  if (!routing.locales.includes(locale)) {
    notFound();
  }

  setRequestLocale(locale);

  // Using internationalization in Client Components
  const messages = await getMessages();

  // The `suppressHydrationWarning` attribute in <body> is used to prevent hydration errors caused by Sentry Overlay,
  // which dynamically adds a `style` attribute to the body tag.

  // console.log(locale, 'locale ss');
  if (!routing.locales.includes(locale as "en" | "ar")) {
    notFound();
  }

  return (
    <html lang={locale}>
      <body
        className={`max-w-[1920px] h-full relative  overflow-x-hidden   mx-auto  ${
          geistSans.variable
        } ${geistMono.variable} antialiased ${locale === "ar" ? "rtl" : "ltr"}`}
      >
        <Providers>
          <NextIntlClientProvider messages={messages}>
            {props.children}
          </NextIntlClientProvider>
        </Providers>
      </body>
    </html>
  );
}
//
